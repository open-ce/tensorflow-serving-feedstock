From 40e0eef82a19e8d15f40576e4d28e0bf918d62fa Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Tue, 1 Jun 2021 12:16:36 -0400
Subject: [PATCH] TF 2.5 build fix ppc64le

---
 WORKSPACE                                       |   1 +
 third_party/tensorflow/BUILD                    |   0
 third_party/tensorflow/tensorflow_patches.patch | 227 ++++++++++++++++++++++++
 3 files changed, 228 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/tensorflow_patches.patch

diff --git a/WORKSPACE b/WORKSPACE
index 79ca7f2..c02b8d4 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,6 +17,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "cb99f136dc5c89143669888a44bfdd134c086e1e2d9e36278c1eb0f03fe62d76",
     git_commit = "a4dfb8d1a71385bd6d122e4f27f86dcebb96712d",
+    patch = "//third_party/tensorflow:tensorflow_patches.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 0000000..e69de29
diff --git a/third_party/tensorflow/tensorflow_patches.patch b/third_party/tensorflow/tensorflow_patches.patch
new file mode 100644
index 0000000..e70535b
--- /dev/null
+++ b/third_party/tensorflow/tensorflow_patches.patch
@@ -0,0 +1,227 @@
+From 2a7d6ac9f5598c67717ddb2c6464db1ca94af58c Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Tue, 1 Jun 2021 12:15:29 -0400
+Subject: [PATCH] tensoflow patches
+
+---
+ .../core/platform/default/build_config/BUILD       |  2 ++
+ tensorflow/core/platform/default/cord.h            |  5 +++
+ tensorflow/core/profiler/utils/xplane_utils.cc     |  3 +-
+ tensorflow/python/lib/core/ndarray_tensor.cc       |  2 +-
+ tensorflow/stream_executor/cuda/BUILD              |  2 +-
+ third_party/cub.BUILD                              |  2 +-
+ third_party/gpus/cuda/BUILD.tpl                    |  8 +++++
+ third_party/gpus/cuda_configure.bzl                | 40 ++++++++++++++++++++++
+ third_party/tensorrt/tensorrt_configure.bzl        |  1 +
+ 9 files changed, 61 insertions(+), 4 deletions(-)
+
+diff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD
+index 9746e6e..359f756 100644
+--- a/tensorflow/core/platform/default/build_config/BUILD
++++ b/tensorflow/core/platform/default/build_config/BUILD
+@@ -212,8 +212,10 @@ cc_library(
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib",
+         ],
+         "//conditions:default": [
++            "-Lbazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+             "-Wl,-rpath,../local_config_cuda/cuda/lib64",
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64",
++            "-Wl,-rpath,bazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+         ],
+     }),
+     deps = [
+diff --git a/tensorflow/core/platform/default/cord.h b/tensorflow/core/platform/default/cord.h
+index cdfab1e..febd6fa 100644
+--- a/tensorflow/core/platform/default/cord.h
++++ b/tensorflow/core/platform/default/cord.h
+@@ -16,7 +16,12 @@ limitations under the License.
+ #ifndef TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ #define TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ 
++// It seems CORD doesn't work well with CUDA <= 10.2
++#if !defined(__CUDACC__) || ((defined(__CUDACC__) && CUDA_VERSOIN > 10020))
++
+ #include "absl/strings/cord.h"
+ #define TF_CORD_SUPPORT 1
+ 
++#endif  // __CUDACC__
++
+ #endif  // TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+diff --git a/tensorflow/core/profiler/utils/xplane_utils.cc b/tensorflow/core/profiler/utils/xplane_utils.cc
+index 5b7d22c..bcaff8e 100644
+--- a/tensorflow/core/profiler/utils/xplane_utils.cc
++++ b/tensorflow/core/profiler/utils/xplane_utils.cc
+@@ -101,7 +101,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index 6cf51ce..b7bd5a8 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -16,7 +16,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>
+-#include <optional>
++//#include <optional>
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index a43963b..3b2e10b 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -268,7 +268,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/third_party/cub.BUILD b/third_party/cub.BUILD
+index 581d8dd..c446f05 100644
+--- a/third_party/cub.BUILD
++++ b/third_party/cub.BUILD
+@@ -11,5 +11,5 @@ exports_files(["LICENSE.TXT"])
+ cc_library(
+     name = "cub",
+     hdrs = glob(["cub/**"]),
+-    deps = ["@local_cuda//:cuda_headers"],
++    deps = ["@local_config_cuda//cuda:cuda_headers"],
+ )
+diff --git a/third_party/gpus/cuda/BUILD.tpl b/third_party/gpus/cuda/BUILD.tpl
+index 8f783e5..3590ce3 100644
+--- a/third_party/gpus/cuda/BUILD.tpl
++++ b/third_party/gpus/cuda/BUILD.tpl
+@@ -76,6 +76,13 @@ cc_library(
+ )
+ 
+ cc_library(
++    name = "nvrtc",
++    srcs = ["cuda/lib/%{nvrtc_lib}"],
++    data = ["cuda/lib/%{nvrtc_lib}"],
++    linkstatic = 1,
++)
++
++cc_library(
+     name = "cudart",
+     srcs = ["cuda/lib/%{cudart_lib}"],
+     data = ["cuda/lib/%{cudart_lib}"],
+@@ -188,6 +195,7 @@ cc_library(
+         ":cudnn",
+         ":cufft",
+         ":curand",
++        ":nvrtc",
+     ],
+ )
+ 
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index 867cab4..3d1dd11 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -51,6 +51,7 @@ load(
+     "read_dir",
+     "realpath",
+     "which",
++    "files_exist",
+ )
+ 
+ _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
+@@ -330,6 +331,30 @@ def auto_configure_fail(msg):
+ 
+ # END cc_configure common functions (see TODO above).
+ 
++# TODO: Below code isn't tested with platforms other than linux ppc64le and x86_64
++def _get_cuda_extra_target_path(repository_ctx, cuda_config): 
++    cuda_extra_path = ""
++    if cuda_config.cpu_value == "Linux":
++        os_name = "linux"
++
++    cpu = "x86_64"
++    machine_type = repository_ctx.execute(["bash", "-c", "uname -p"]).stdout
++    if (machine_type.startswith("ppc") or
++        machine_type.startswith("powerpc")):
++        cpu = "ppc64le"
++    elif machine_type.startswith("s390x"):
++        cpu = "s390x"
++    elif machine_type.startswith("aarch64"):
++        cpu = "aarch64"
++    elif machine_type.startswith("arm"):
++        cpu = "arm"
++
++    extra_path = cuda_config.cuda_toolkit_path + "/targets/" + cpu + "-" + os_name
++    if files_exist(repository_ctx, [extra_path]) == [True]:
++        cuda_extra_path = realpath(repository_ctx, extra_path)
++
++    return cuda_extra_path
++
+ def _cuda_include_path(repository_ctx, cuda_config):
+     """Generates the Starlark string with cuda include directories.
+ 
+@@ -362,6 +387,11 @@ def _cuda_include_path(repository_ctx, cuda_config):
+     if target_dir != "":
+         inc_entries.append(realpath(repository_ctx, target_dir))
+     inc_entries.append(realpath(repository_ctx, cuda_config.cuda_toolkit_path + "/include"))
++
++    extra_cuda_path = _get_cuda_extra_target_path(repository_ctx, cuda_config)
++    extra_cuda_include_path = realpath(repository_ctx, extra_cuda_path + "/include")
++    if extra_cuda_include_path != "":
++        inc_entries.append(extra_cuda_include_path)
+     return inc_entries
+ 
+ def enable_cuda(repository_ctx):
+@@ -600,6 +630,14 @@ def _find_libs(repository_ctx, check_cuda_libs_script, cuda_config):
+             cuda_config.cusparse_version,
+             static = False,
+         ),
++        "nvrtc": _check_cuda_lib_params(
++            "nvrtc",
++            cpu_value,
++            _get_cuda_extra_target_path(repository_ctx, cuda_config) + "/lib",
++            cuda_config.cuda_version,
++            static = False,
++        ),
++
+     }
+ 
+     # Verify that the libs actually exist at their locations.
+@@ -794,6 +832,7 @@ def _create_dummy_repository(repository_ctx):
+             "%{curand_lib}": lib_name("curand", cpu_value),
+             "%{cupti_lib}": lib_name("cupti", cpu_value),
+             "%{cusparse_lib}": lib_name("cusparse", cpu_value),
++            "%{nvrtc_lib}": lib_name("nvrtc", cpu_value),
+             "%{cub_actual}": ":cuda_headers",
+             "%{copy_rules}": """
+ filegroup(name="cuda-include")
+@@ -1159,6 +1198,7 @@ def _create_local_cuda_repository(repository_ctx):
+             "%{curand_lib}": _basename(repository_ctx, cuda_libs["curand"]),
+             "%{cupti_lib}": _basename(repository_ctx, cuda_libs["cupti"]),
+             "%{cusparse_lib}": _basename(repository_ctx, cuda_libs["cusparse"]),
++            "%{nvrtc_lib}": _basename(repository_ctx, cuda_libs["nvrtc"]),
+             "%{cub_actual}": cub_actual,
+             "%{copy_rules}": "\n".join(copy_rules),
+         },
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index 8b28f57..e4aed19 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -116,6 +116,7 @@ def _create_local_tensorrt_repository(repository_ctx):
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
+ 
++    libraries.append("libmyelin.so.1")
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+     include_dir = config["tensorrt_include_dir"] + "/"
+-- 
+1.8.3.1
+
-- 
1.8.3.1

