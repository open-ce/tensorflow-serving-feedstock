From cc449154e2d8fad2282b727c861b07fae7958aaa Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Wed, 15 Sep 2021 07:09:04 -0400
Subject: [PATCH] TF 2.6 build fix ppc64le

---
 WORKSPACE                                     |   1 +
 third_party/tensorflow/BUILD                  |   0
 .../tensorflow/tensorflow_patches.patch       | 373 ++++++++++++++++++
 3 files changed, 374 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/tensorflow_patches.patch

diff --git a/WORKSPACE b/WORKSPACE
index baa63038..1c270a39 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,6 +17,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "70a865814b9d773024126a6ce6fea68fefe907b7ae6f9ac7e656613de93abf87",
     git_commit = "919f693420e35d00c8d0a42100837ae3718f7927",
+    patch = "//third_party/tensorflow:tensorflow_patches.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 00000000..e69de29b
diff --git a/third_party/tensorflow/tensorflow_patches.patch b/third_party/tensorflow/tensorflow_patches.patch
new file mode 100644
index 00000000..d31e25d5
--- /dev/null
+++ b/third_party/tensorflow/tensorflow_patches.patch
@@ -0,0 +1,373 @@
+From a99b406695608f1350fefa5e2b7fdebd5f3faf7f Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Wed, 15 Sep 2021 07:06:24 -0400
+Subject: [PATCH] tensorflow patches
+
+---
+ tensorflow/core/kernels/BUILD                 |  6 ++-
+ .../eigen_backward_cuboid_convolutions.h      |  1 +
+ .../eigen_backward_spatial_convolutions.h     |  1 +
+ .../core/kernels/eigen_cuboid_convolution.h   | 18 +++++----
+ .../kernels/eigen_spatial_convolutions-inl.h  | 18 +++++----
+ .../core/platform/default/build_config/BUILD  |  2 +
+ .../core/profiler/utils/xplane_utils.cc       |  3 +-
+ tensorflow/python/lib/core/ndarray_tensor.cc  |  2 +-
+ tensorflow/stream_executor/cuda/BUILD         |  2 +-
+ third_party/cub.BUILD                         |  2 +-
+ third_party/eigen3/workspace.bzl              |  4 +-
+ third_party/gpus/cuda/BUILD.tpl               |  8 ++++
+ third_party/gpus/cuda_configure.bzl           | 40 +++++++++++++++++++
+ third_party/tensorrt/tensorrt_configure.bzl   |  1 +
+ 14 files changed, 86 insertions(+), 22 deletions(-)
+
+diff --git a/tensorflow/core/kernels/BUILD b/tensorflow/core/kernels/BUILD
+index 6958d708c41..834d4685c8b 100644
+--- a/tensorflow/core/kernels/BUILD
++++ b/tensorflow/core/kernels/BUILD
+@@ -942,6 +942,9 @@ cc_library(
+         "eigen_convolution_helpers.h",
+     ],
+     compatible_with = get_compatible_with_portable(),
++    defines = [
++        "EIGEN_ALTIVEC_USE_CUSTOM_PACK=0",
++    ],
+ )
+ 
+ # OpKernel libraries ----------------------------------------------------------
+@@ -3974,8 +3977,7 @@ cc_library(
+     ],
+ )
+ 
+-NN_DEPS = [
+-    ":conv_2d",
++NN_DEPS = if_cuda_or_rocm([":conv_2d"]) + [
+     ":eigen_contraction_kernel",
+     ":ops_util",
+     "//tensorflow/core:framework",
+diff --git a/tensorflow/core/kernels/eigen_backward_cuboid_convolutions.h b/tensorflow/core/kernels/eigen_backward_cuboid_convolutions.h
+index 9a2d431b0d8..958f1149dc9 100644
+--- a/tensorflow/core/kernels/eigen_backward_cuboid_convolutions.h
++++ b/tensorflow/core/kernels/eigen_backward_cuboid_convolutions.h
+@@ -17,6 +17,7 @@ limitations under the License.
+ #define TENSORFLOW_CORE_KERNELS_EIGEN_BACKWARD_CUBOID_CONVOLUTIONS_H_
+ 
+ #include "third_party/eigen3/unsupported/Eigen/CXX11/Tensor"
++#include "tensorflow/core/kernels/eigen_cuboid_convolution.h"
+ 
+ namespace Eigen {
+ 
+diff --git a/tensorflow/core/kernels/eigen_backward_spatial_convolutions.h b/tensorflow/core/kernels/eigen_backward_spatial_convolutions.h
+index 8c4c86acd66..881efed4bc2 100644
+--- a/tensorflow/core/kernels/eigen_backward_spatial_convolutions.h
++++ b/tensorflow/core/kernels/eigen_backward_spatial_convolutions.h
+@@ -17,6 +17,7 @@ limitations under the License.
+ #define TENSORFLOW_CORE_KERNELS_EIGEN_BACKWARD_SPATIAL_CONVOLUTIONS_H_
+ 
+ #include "third_party/eigen3/unsupported/Eigen/CXX11/Tensor"
++#include "tensorflow/core/kernels/eigen_spatial_convolutions.h"
+ 
+ namespace Eigen {
+ 
+diff --git a/tensorflow/core/kernels/eigen_cuboid_convolution.h b/tensorflow/core/kernels/eigen_cuboid_convolution.h
+index d12db1b92a0..bf0cdd59e4f 100644
+--- a/tensorflow/core/kernels/eigen_cuboid_convolution.h
++++ b/tensorflow/core/kernels/eigen_cuboid_convolution.h
+@@ -24,17 +24,11 @@ limitations under the License.
+ 
+ #include "tensorflow/core/kernels/eigen_convolution_helpers.h"
+ 
+-#if defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)
+-#define TF_USE_CUSTOM_EIGEN_PACK 0
+-#else
+-#define TF_USE_CUSTOM_EIGEN_PACK 1
+-#endif
+-
+ namespace Eigen {
+ 
+ namespace internal {
+ 
+-#if TF_USE_CUSTOM_EIGEN_PACK
++#if !EIGEN_ALTIVEC_USE_CUSTOM_PACK
+ // WARNING: Most of the code here implicitly assumes that the matrix is in
+ // ColMajor layout. This is guaranteed by the tensor contraction (see
+ // TensorContraction.h).
+@@ -1364,6 +1358,15 @@ struct gemm_pack_rhs<
+     }
+ 
+     // Copy the remaining columns one at a time (nr==1).
++#if defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)
++    // remaining columns are handled different for PPC
++    for (Index k = 0; k < depth; k++) {
++      for (Index j2 = packet_cols4; j2 < cols; ++j2) {
++        *block = rhs(k, j2);
++        block += 1;
++      }
++    }
++#else
+     for (Index j2 = packet_cols4; j2 < cols; ++j2) {
+       const SubMapper dm0 = rhs.getLinearMapper(0, j2);
+       for (Index k = 0; k < depth; k++) {
+@@ -1371,6 +1374,7 @@ struct gemm_pack_rhs<
+         block += 1;
+       }
+     }
++#endif
+   }
+ };
+ 
+diff --git a/tensorflow/core/kernels/eigen_spatial_convolutions-inl.h b/tensorflow/core/kernels/eigen_spatial_convolutions-inl.h
+index b195a714387..61cfc820a6c 100644
+--- a/tensorflow/core/kernels/eigen_spatial_convolutions-inl.h
++++ b/tensorflow/core/kernels/eigen_spatial_convolutions-inl.h
+@@ -18,18 +18,12 @@ limitations under the License.
+ 
+ #include "tensorflow/core/kernels/eigen_convolution_helpers.h"
+ 
+-#if defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)
+-#define TF_USE_CUSTOM_EIGEN_PACK 0
+-#else
+-#define TF_USE_CUSTOM_EIGEN_PACK 1
+-#endif
+-
+ // Note this header is used in both TF and TFLite.
+ namespace Eigen {
+ 
+ namespace internal {
+ 
+-#if TF_USE_CUSTOM_EIGEN_PACK
++#if !EIGEN_ALTIVEC_USE_CUSTOM_PACK
+ // WARNING: Most of the code here implicitly assumes that the matrix is in
+ // ColMajor layout. This is guaranteed by the tensor contraction (see
+ // TensorContraction.h).
+@@ -1239,6 +1233,15 @@ struct gemm_pack_rhs<
+     }
+ 
+     // copy the remaining columns one at a time (nr==1)
++#if defined(EIGEN_VECTORIZE_ALTIVEC) || defined(EIGEN_VECTORIZE_VSX)
++    // remaining columns are handled different for PPC
++    for (Index k = 0; k < depth; k++) {
++      for (Index j2 = packet_cols4; j2 < cols; ++j2) {
++        *block = rhs(k, j2);
++        block += 1;
++      }
++    }
++#else
+     for (Index j2 = packet_cols4; j2 < cols; ++j2) {
+       const SubMapper dm0 = rhs.getLinearMapper(0, j2);
+       for (Index k = 0; k < depth; k++) {
+@@ -1246,6 +1249,7 @@ struct gemm_pack_rhs<
+         block += 1;
+       }
+     }
++#endif
+   }
+ };
+ 
+diff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD
+index 9746e6e5222..359f756043e 100644
+--- a/tensorflow/core/platform/default/build_config/BUILD
++++ b/tensorflow/core/platform/default/build_config/BUILD
+@@ -212,8 +212,10 @@ cc_library(
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib",
+         ],
+         "//conditions:default": [
++            "-Lbazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+             "-Wl,-rpath,../local_config_cuda/cuda/lib64",
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64",
++            "-Wl,-rpath,bazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+         ],
+     }),
+     deps = [
+diff --git a/tensorflow/core/profiler/utils/xplane_utils.cc b/tensorflow/core/profiler/utils/xplane_utils.cc
+index 5b7d22ce22f..bcaff8e634a 100644
+--- a/tensorflow/core/profiler/utils/xplane_utils.cc
++++ b/tensorflow/core/profiler/utils/xplane_utils.cc
+@@ -101,7 +101,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index 6cf51ceebbd..b7bd5a87c89 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -16,7 +16,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>
+-#include <optional>
++//#include <optional>
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index dea06e0efd4..9db66329121 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -270,7 +270,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/third_party/cub.BUILD b/third_party/cub.BUILD
+index 581d8dd9421..c446f0517d3 100644
+--- a/third_party/cub.BUILD
++++ b/third_party/cub.BUILD
+@@ -11,5 +11,5 @@ exports_files(["LICENSE.TXT"])
+ cc_library(
+     name = "cub",
+     hdrs = glob(["cub/**"]),
+-    deps = ["@local_cuda//:cuda_headers"],
++    deps = ["@local_config_cuda//cuda:cuda_headers"],
+ )
+diff --git a/third_party/eigen3/workspace.bzl b/third_party/eigen3/workspace.bzl
+index 736b61adc30..96371dda195 100644
+--- a/third_party/eigen3/workspace.bzl
++++ b/third_party/eigen3/workspace.bzl
+@@ -6,8 +6,8 @@ def repo():
+     """Imports Eigen."""
+ 
+     # Attention: tools parse and update these lines.
+-    EIGEN_COMMIT = "12e8d57108c50d8a63605c6eb0144c838c128337"
+-    EIGEN_SHA256 = "f689246e342c3955af48d26ce74ac34d21b579a00675c341721a735937919b02"
++    EIGEN_COMMIT = "7b35638ddb99a0298c5d3450de506a8e8e0203d3"
++    EIGEN_SHA256 = "2f25d7d0279c57ce7c533bc71ba78af9c24a0a0aac4102bfeb28c2b5737499d1"
+ 
+     tf_http_archive(
+         name = "eigen_archive",
+diff --git a/third_party/gpus/cuda/BUILD.tpl b/third_party/gpus/cuda/BUILD.tpl
+index 8f783e58d66..3590ce32dae 100644
+--- a/third_party/gpus/cuda/BUILD.tpl
++++ b/third_party/gpus/cuda/BUILD.tpl
+@@ -75,6 +75,13 @@ cc_library(
+     srcs = ["cuda/lib/%{cuda_driver_lib}"],
+ )
+ 
++cc_library(
++    name = "nvrtc",
++    srcs = ["cuda/lib/%{nvrtc_lib}"],
++    data = ["cuda/lib/%{nvrtc_lib}"],
++    linkstatic = 1,
++)
++
+ cc_library(
+     name = "cudart",
+     srcs = ["cuda/lib/%{cudart_lib}"],
+@@ -188,6 +195,7 @@ cc_library(
+         ":cudnn",
+         ":cufft",
+         ":curand",
++        ":nvrtc",
+     ],
+ )
+ 
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index ed8ba3d5205..1c7bfd6c144 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -51,6 +51,7 @@ load(
+     "read_dir",
+     "realpath",
+     "which",
++    "files_exist",
+ )
+ 
+ _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
+@@ -330,6 +331,30 @@ def auto_configure_fail(msg):
+ 
+ # END cc_configure common functions (see TODO above).
+ 
++# TODO: Below code isn't tested with platforms other than linux ppc64le and x86_64
++def _get_cuda_extra_target_path(repository_ctx, cuda_config): 
++    cuda_extra_path = ""
++    if cuda_config.cpu_value == "Linux":
++        os_name = "linux"
++
++    cpu = "x86_64"
++    machine_type = repository_ctx.execute(["bash", "-c", "uname -p"]).stdout
++    if (machine_type.startswith("ppc") or
++        machine_type.startswith("powerpc")):
++        cpu = "ppc64le"
++    elif machine_type.startswith("s390x"):
++        cpu = "s390x"
++    elif machine_type.startswith("aarch64"):
++        cpu = "aarch64"
++    elif machine_type.startswith("arm"):
++        cpu = "arm"
++
++    extra_path = cuda_config.cuda_toolkit_path + "/targets/" + cpu + "-" + os_name
++    if files_exist(repository_ctx, [extra_path]) == [True]:
++        cuda_extra_path = realpath(repository_ctx, extra_path)
++
++    return cuda_extra_path
++
+ def _cuda_include_path(repository_ctx, cuda_config):
+     """Generates the Starlark string with cuda include directories.
+ 
+@@ -362,6 +387,11 @@ def _cuda_include_path(repository_ctx, cuda_config):
+     if target_dir != "":
+         inc_entries.append(realpath(repository_ctx, target_dir))
+     inc_entries.append(realpath(repository_ctx, cuda_config.cuda_toolkit_path + "/include"))
++
++    extra_cuda_path = _get_cuda_extra_target_path(repository_ctx, cuda_config)
++    extra_cuda_include_path = realpath(repository_ctx, extra_cuda_path + "/include")
++    if extra_cuda_include_path != "":
++        inc_entries.append(extra_cuda_include_path)
+     return inc_entries
+ 
+ def enable_cuda(repository_ctx):
+@@ -600,6 +630,14 @@ def _find_libs(repository_ctx, check_cuda_libs_script, cuda_config):
+             cuda_config.cusparse_version,
+             static = False,
+         ),
++        "nvrtc": _check_cuda_lib_params(
++            "nvrtc",
++            cpu_value,
++            _get_cuda_extra_target_path(repository_ctx, cuda_config) + "/lib",
++            cuda_config.cuda_version,
++            static = False,
++        ),
++
+     }
+ 
+     # Verify that the libs actually exist at their locations.
+@@ -794,6 +832,7 @@ def _create_dummy_repository(repository_ctx):
+             "%{curand_lib}": lib_name("curand", cpu_value),
+             "%{cupti_lib}": lib_name("cupti", cpu_value),
+             "%{cusparse_lib}": lib_name("cusparse", cpu_value),
++            "%{nvrtc_lib}": lib_name("nvrtc", cpu_value),
+             "%{cub_actual}": ":cuda_headers",
+             "%{copy_rules}": """
+ filegroup(name="cuda-include")
+@@ -1160,6 +1199,7 @@ def _create_local_cuda_repository(repository_ctx):
+             "%{curand_lib}": _basename(repository_ctx, cuda_libs["curand"]),
+             "%{cupti_lib}": _basename(repository_ctx, cuda_libs["cupti"]),
+             "%{cusparse_lib}": _basename(repository_ctx, cuda_libs["cusparse"]),
++            "%{nvrtc_lib}": _basename(repository_ctx, cuda_libs["nvrtc"]),
+             "%{cub_actual}": cub_actual,
+             "%{copy_rules}": "\n".join(copy_rules),
+         },
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index db3c65a8766..089d48ef65d 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -129,6 +129,7 @@ def _create_local_tensorrt_repository(repository_ctx):
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
+ 
++    libraries.append("libmyelin.so.1")
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+     include_dir = config["tensorrt_include_dir"] + "/"
+-- 
+2.23.0
+
-- 
2.23.0

