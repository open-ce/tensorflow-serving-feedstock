From 1d07ee5cafc8c6542e299097a40cc78f433240b6 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Wed, 7 Apr 2021 08:15:38 -0500
Subject: [PATCH] TF Build fix ppc64le

---
 WORKSPACE                                       |   1 +
 third_party/tensorflow/BUILD                    |   0
 third_party/tensorflow/tensorflow_patches.patch | 189 ++++++++++++++++++++++++
 3 files changed, 190 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/tensorflow_patches.patch

diff --git a/WORKSPACE b/WORKSPACE
index 34ce956..e135652 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -13,6 +13,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "ac2d19cf529f9c2c9faaf87e472d08a2bdbb2ab058958e2cafd65e5eb0637b2b",
     git_commit = "85c8b2a817f95a3e979ecd1ed95bff1dc1335cff",
+    patch = "//third_party/tensorflow:tensorflow_patches.patch",
 )
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 0000000..e69de29
diff --git a/third_party/tensorflow/tensorflow_patches.patch b/third_party/tensorflow/tensorflow_patches.patch
new file mode 100644
index 0000000..ac855f4
--- /dev/null
+++ b/third_party/tensorflow/tensorflow_patches.patch
@@ -0,0 +1,189 @@
+From f777ff13bf0996840365c5ec619c874ea9e1b2e3 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Wed, 7 Apr 2021 08:14:40 -0500
+Subject: [PATCH] tensoflow patches
+
+---
+ .../core/platform/default/build_config/BUILD       |  2 ++
+ tensorflow/stream_executor/cuda/BUILD              |  2 +-
+ tensorflow/workspace.bzl                           |  8 ++---
+ third_party/gpus/cuda/BUILD.tpl                    |  8 +++++
+ third_party/gpus/cuda_configure.bzl                | 40 ++++++++++++++++++++++
+ third_party/tensorrt/tensorrt_configure.bzl        |  1 +
+ 6 files changed, 56 insertions(+), 5 deletions(-)
+
+diff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD
+index 83eadf2..2f70bf6 100644
+--- a/tensorflow/core/platform/default/build_config/BUILD
++++ b/tensorflow/core/platform/default/build_config/BUILD
+@@ -199,8 +199,10 @@ cc_library(
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib",
+         ],
+         "//conditions:default": [
++            "-Lbazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+             "-Wl,-rpath,../local_config_cuda/cuda/lib64",
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64",
++            "-Wl,-rpath,bazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+         ],
+     }),
+     deps = [
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index 7086217..9cdd1ee 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -271,7 +271,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/tensorflow/workspace.bzl b/tensorflow/workspace.bzl
+index 89062b1..386d94c 100755
+--- a/tensorflow/workspace.bzl
++++ b/tensorflow/workspace.bzl
+@@ -198,11 +198,11 @@ def tf_repositories(path_prefix = "", tf_repo_name = ""):
+         name = "eigen_archive",
+         build_file = clean_dep("//third_party:eigen.BUILD"),
+         patch_file = clean_dep("//third_party/eigen3:gpu_packet_math.patch"),
+-        sha256 = "e807a6a6f3a0e8ab10adeb59bb5a9bbb113e8e1684f9b4b32f73f58fd758b4cf",  # SHARED_EIGEN_SHA
+-        strip_prefix = "eigen-011e0db31d1bed8b7f73662be6d57d9f30fa457a",
++        sha256 = "5b6c58d367794c76b5ad54effc60d295450958f98b7506966a29d0e45d7b066d",  # SHARED_EIGEN_SHA
++        strip_prefix = "libeigen-eigen-revert-matrix-enhance",
+         urls = [
+-            "https://storage.googleapis.com/mirror.tensorflow.org/gitlab.com/libeigen/eigen/-/archive/011e0db31d1bed8b7f73662be6d57d9f30fa457a/eigen-011e0db31d1bed8b7f73662be6d57d9f30fa457a.tar.gz",
+-            "https://gitlab.com/libeigen/eigen/-/archive/011e0db31d1bed8b7f73662be6d57d9f30fa457a/eigen-011e0db31d1bed8b7f73662be6d57d9f30fa457a.tar.gz",
++            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/open-ce/libeigen-eigen/archive/revert-matrix-enhance.zip",
++            "https://github.com/open-ce/libeigen-eigen/archive/revert-matrix-enhance.zip",
+         ],
+     )
+ 
+diff --git a/third_party/gpus/cuda/BUILD.tpl b/third_party/gpus/cuda/BUILD.tpl
+index 70eacf8..ecc389d 100644
+--- a/third_party/gpus/cuda/BUILD.tpl
++++ b/third_party/gpus/cuda/BUILD.tpl
+@@ -69,6 +69,13 @@ cc_library(
+ )
+ 
+ cc_library(
++    name = "nvrtc",
++    srcs = ["cuda/lib/%{nvrtc_lib}"],
++    data = ["cuda/lib/%{nvrtc_lib}"],
++    linkstatic = 1,
++)
++
++cc_library(
+     name = "cudart",
+     srcs = ["cuda/lib/%{cudart_lib}"],
+     data = ["cuda/lib/%{cudart_lib}"],
+@@ -181,6 +188,7 @@ cc_library(
+         ":cudnn",
+         ":cufft",
+         ":curand",
++        ":nvrtc",
+     ],
+ )
+ 
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index 3ba3447..17178f6 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -51,6 +51,7 @@ load(
+     "read_dir",
+     "realpath",
+     "which",
++    "files_exist",
+ )
+ 
+ _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
+@@ -330,6 +331,30 @@ def auto_configure_fail(msg):
+ 
+ # END cc_configure common functions (see TODO above).
+ 
++# TODO: Below code isn't tested with platforms other than linux ppc64le and x86_64
++def _get_cuda_extra_target_path(repository_ctx, cuda_config): 
++    cuda_extra_path = ""
++    if cuda_config.cpu_value == "Linux":
++        os_name = "linux"
++
++    cpu = "x86_64"
++    machine_type = repository_ctx.execute(["bash", "-c", "uname -p"]).stdout
++    if (machine_type.startswith("ppc") or
++        machine_type.startswith("powerpc")):
++        cpu = "ppc64le"
++    elif machine_type.startswith("s390x"):
++        cpu = "s390x"
++    elif machine_type.startswith("aarch64"):
++        cpu = "aarch64"
++    elif machine_type.startswith("arm"):
++        cpu = "arm"
++    
++    extra_path = cuda_config.cuda_toolkit_path + "/targets/" + cpu + "-" + os_name
++    if files_exist(repository_ctx, [extra_path]) == [True]:
++        cuda_extra_path = realpath(repository_ctx, extra_path)
++    
++    return cuda_extra_path
++   
+ def _cuda_include_path(repository_ctx, cuda_config):
+     """Generates the Starlark string with cuda include directories.
+ 
+@@ -362,6 +387,11 @@ def _cuda_include_path(repository_ctx, cuda_config):
+     if target_dir != "":
+         inc_entries.append(realpath(repository_ctx, target_dir))
+     inc_entries.append(realpath(repository_ctx, cuda_config.cuda_toolkit_path + "/include"))
++
++    extra_cuda_path = _get_cuda_extra_target_path(repository_ctx, cuda_config)
++    extra_cuda_include_path = realpath(repository_ctx, extra_cuda_path + "/include")
++    if extra_cuda_include_path != "":
++        inc_entries.append(extra_cuda_include_path)
+     return inc_entries
+ 
+ def enable_cuda(repository_ctx):
+@@ -600,6 +630,14 @@ def _find_libs(repository_ctx, check_cuda_libs_script, cuda_config):
+             cuda_config.cusparse_version,
+             static = False,
+         ),
++        "nvrtc": _check_cuda_lib_params(
++            "nvrtc",
++            cpu_value,
++            _get_cuda_extra_target_path(repository_ctx, cuda_config) + "/lib",
++            cuda_config.cudart_version,
++            static = False,
++        ),
++
+     }
+ 
+     # Verify that the libs actually exist at their locations.
+@@ -794,6 +832,7 @@ def _create_dummy_repository(repository_ctx):
+             "%{curand_lib}": lib_name("curand", cpu_value),
+             "%{cupti_lib}": lib_name("cupti", cpu_value),
+             "%{cusparse_lib}": lib_name("cusparse", cpu_value),
++            "%{nvrtc_lib}": lib_name("nvrtc", cpu_value),
+             "%{cub_actual}": ":cuda_headers",
+             "%{copy_rules}": """
+ filegroup(name="cuda-include")
+@@ -1165,6 +1204,7 @@ def _create_local_cuda_repository(repository_ctx):
+             "%{curand_lib}": _basename(repository_ctx, cuda_libs["curand"]),
+             "%{cupti_lib}": _basename(repository_ctx, cuda_libs["cupti"]),
+             "%{cusparse_lib}": _basename(repository_ctx, cuda_libs["cusparse"]),
++            "%{nvrtc_lib}": _basename(repository_ctx, cuda_libs["nvrtc"]),
+             "%{cub_actual}": cub_actual,
+             "%{copy_rules}": "\n".join(copy_rules),
+         },
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index 9c980a9..fe1830f 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -101,6 +101,7 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmyelin.so.1")
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+     include_dir = config["tensorrt_include_dir"] + "/"
+-- 
+1.8.3.1
+
-- 
1.8.3.1

