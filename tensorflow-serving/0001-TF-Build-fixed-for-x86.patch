From 3dd5a05061da61150c63d18ec36f3ed2bf7708f2 Mon Sep 17 00:00:00 2001
From: Aman Surkar <Aman.Surkar@ibm.com>
Date: Tue, 12 Mar 2024 08:57:19 +0000
Subject: [PATCH] TF Build fixed

---
 WORKSPACE                                     |  10 +
 third_party/tensorflow/BUILD                  |   0
 .../tensorflow/tensorflow_patches.patch       | 414 ++++++++++++++++++
 3 files changed, 424 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/tensorflow_patches.patch

diff --git a/WORKSPACE b/WORKSPACE
index cea6d5a7..e02cee17 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -9,6 +9,15 @@ local_repository(
     path = "tensorflow_serving/experimental/tensorflow/ops/remote_predict/",
 )
 
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+
+http_archive(
+    name = "boringssl",
+    sha256 = "534fa658bd845fd974b50b10f444d392dfd0d93768c4a51b61263fd37d851c40",
+    strip_prefix = "boringssl-b9232f9e27e5668bc0414879dcdedb2a59ea75f2",
+    urls = ["https://github.com/google/boringssl/archive/b9232f9e27e5668bc0414879dcdedb2a59ea75f2.tar.gz"],
+)
+
 # ===== TensorFlow dependency =====
 #
 # TensorFlow is imported here instead of in tf_serving_workspace() because
@@ -26,6 +35,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "bede963ce97c4badcbb3149acd7c35a6a4954fa3361b777272a58a300e7e8f1d",
     git_commit = "99d80a9e254c9df7940b2902b14d15914dbbbcd9",
+    patch = "//third_party/tensorflow:tensorflow_patches.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 00000000..e69de29b
diff --git a/third_party/tensorflow/tensorflow_patches.patch b/third_party/tensorflow/tensorflow_patches.patch
new file mode 100644
index 00000000..e351d7aa
--- /dev/null
+++ b/third_party/tensorflow/tensorflow_patches.patch
@@ -0,0 +1,414 @@
+From 214a3603616e9c07635af17ca438a39da02d8b22 Mon Sep 17 00:00:00 2001
+From: Aman Surkar <Aman.Surkar@ibm.com>
+Date: Tue, 12 Mar 2024 08:54:21 +0000
+Subject: [PATCH] TF patches
+
+---
+ tensorflow/python/lib/core/ndarray_tensor.cc  |  2 +-
+ tensorflow/tensorflow.bzl                     |  2 +
+ tensorflow/tsl/profiler/utils/xplane_utils.cc |  3 +-
+ tensorflow/workspace2.bzl                     | 11 +++
+ third_party/gpus/cuda/BUILD.tpl               |  8 +++
+ third_party/gpus/cuda_configure.bzl           | 41 +++++++++--
+ third_party/grpc/generate_cc_env_fix.patch    | 60 +++++++++++++++-
+ third_party/grpc/upb_gcc10.patch              | 68 +++++++++++++++++++
+ third_party/systemlibs/sqlite.BUILD           | 27 +++++++-
+ third_party/tensorrt/BUILD.tpl                |  1 +
+ third_party/tensorrt/tensorrt_configure.bzl   |  2 +
+ 11 files changed, 216 insertions(+), 9 deletions(-)
+ create mode 100644 third_party/grpc/upb_gcc10.patch
+
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index db90e3745a8..8f9fb5e01c1 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -20,7 +20,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>   // NOLINT
+-#include <optional>  // NOLINT
++//#include <optional>  // NOLINT
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index 3e83bf61472..f61b585aae0 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -1230,6 +1230,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = visibility,
+         compatible_with = compatible_with,
+@@ -1248,6 +1249,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = [clean_dep("//tensorflow:internal")],
+         compatible_with = compatible_with,
+diff --git a/tensorflow/tsl/profiler/utils/xplane_utils.cc b/tensorflow/tsl/profiler/utils/xplane_utils.cc
+index caaf68bbd24..fedffdd9776 100644
+--- a/tensorflow/tsl/profiler/utils/xplane_utils.cc
++++ b/tensorflow/tsl/profiler/utils/xplane_utils.cc
+@@ -179,7 +179,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
+index 3456b20b7e7..a81e3c95919 100644
+--- a/tensorflow/workspace2.bzl
++++ b/tensorflow/workspace2.bzl
+@@ -519,6 +519,17 @@ def _tf_repositories():
+         urls = tf_mirror_urls("https://curl.se/download/curl-8.4.0.tar.gz"),
+     )
+ 
++    tf_http_archive(
++        name = "upb",
++        sha256 = "61d0417abd60e65ed589c9deee7c124fe76a4106831f6ad39464e1525cef1454",
++        strip_prefix = "upb-9effcbcb27f0a665f9f345030188c0b291e32482",
++        urls = [
++            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/protocolbuffers/upb/archive/9effcbcb27f0a665f9f345030188c0b291e32482.tar.gz",
++            "https://github.com/protocolbuffers/upb/archive/9effcbcb27f0a665f9f345030188c0b291e32482.tar.gz",
++        ],
++        patch_file = ["//third_party/grpc:upb_gcc10.patch"],
++    )
++
+     # WARNING: make sure ncteisen@ and vpai@ are cc-ed on any CL to change the below rule
+     tf_http_archive(
+         name = "com_github_grpc_grpc",
+diff --git a/third_party/gpus/cuda/BUILD.tpl b/third_party/gpus/cuda/BUILD.tpl
+index a3ba2ffccc0..b0f04c9297f 100644
+--- a/third_party/gpus/cuda/BUILD.tpl
++++ b/third_party/gpus/cuda/BUILD.tpl
+@@ -74,6 +74,13 @@ cc_library(
+     srcs = ["cuda/lib/%{cuda_driver_lib}"],
+ )
+ 
++cc_library(
++    name = "nvrtc",
++    srcs = ["cuda/lib/%{nvrtc_lib}"],
++    data = ["cuda/lib/%{nvrtc_lib}"],
++    linkstatic = 1,
++)
++
+ cc_library(
+     name = "cudart",
+     srcs = ["cuda/lib/%{cudart_lib}"],
+@@ -187,6 +194,7 @@ cc_library(
+         ":cudnn",
+         ":cufft",
+         ":curand",
++        ":nvrtc",
+     ],
+ )
+ 
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index b14e6835063..1e9eda5d66c 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -51,6 +51,7 @@ load(
+     "read_dir",
+     "realpath",
+     "which",
++    "files_exist",
+ )
+ 
+ _GCC_HOST_COMPILER_PATH = "GCC_HOST_COMPILER_PATH"
+@@ -354,6 +355,30 @@ def auto_configure_fail(msg):
+ 
+ # END cc_configure common functions (see TODO above).
+ 
++# TODO: Below code isn't tested with platforms other than linux ppc64le and x86_64
++def _get_cuda_extra_target_path(repository_ctx, cuda_config): 
++    cuda_extra_path = ""
++    if cuda_config.cpu_value == "Linux":
++        os_name = "linux"
++
++    cpu = "x86_64"
++    machine_type = repository_ctx.execute(["bash", "-c", "uname -p"]).stdout
++    if (machine_type.startswith("ppc") or
++        machine_type.startswith("powerpc")):
++        cpu = "ppc64le"
++    elif machine_type.startswith("s390x"):
++        cpu = "s390x"
++    elif machine_type.startswith("aarch64"):
++        cpu = "aarch64"
++    elif machine_type.startswith("arm"):
++        cpu = "arm"
++
++    extra_path = cuda_config.cuda_toolkit_path + "/targets/" + cpu + "-" + os_name
++    if files_exist(repository_ctx, [extra_path]) == [True]:
++        cuda_extra_path = realpath(repository_ctx, extra_path)
++
++    return cuda_extra_path
++
+ def _cuda_include_path(repository_ctx, cuda_config):
+     """Generates the Starlark string with cuda include directories.
+ 
+@@ -386,6 +411,11 @@ def _cuda_include_path(repository_ctx, cuda_config):
+     if target_dir != "":
+         inc_entries.append(realpath(repository_ctx, target_dir))
+     inc_entries.append(realpath(repository_ctx, cuda_config.cuda_toolkit_path + "/include"))
++
++    extra_cuda_path = _get_cuda_extra_target_path(repository_ctx, cuda_config)
++    extra_cuda_include_path = realpath(repository_ctx, extra_cuda_path + "/include")
++    if extra_cuda_include_path != "":
++        inc_entries.append(extra_cuda_include_path)
+     return inc_entries
+ 
+ def enable_cuda(repository_ctx):
+@@ -629,6 +659,7 @@ def _find_libs(repository_ctx, check_cuda_libs_script, cuda_config):
+             cuda_config.cusparse_version,
+             static = False,
+         ),
++
+     }
+ 
+     # Verify that the libs actually exist at their locations.
+@@ -1241,10 +1272,12 @@ def _create_local_cuda_repository(repository_ctx):
+     # TODO: when bazel stops adding '-B/usr/bin' by default, remove this
+     #       flag from the CROSSTOOL completely (see
+     #       https://github.com/bazelbuild/bazel/issues/5634)
+-    if should_download_clang:
+-        cuda_defines["%{linker_bin_path}"] = ""
+-    else:
+-        cuda_defines["%{linker_bin_path}"] = host_compiler_prefix
++    # if should_download_clang:
++    #     cuda_defines["%{linker_bin_path}"] = ""
++    # else:
++    #     cuda_defines["%{linker_bin_path}"] = host_compiler_prefix
++    # Never add -B/usr/bin
++    cuda_defines["%{linker_bin_path}"] = ""
+ 
+     cuda_defines["%{extra_no_canonical_prefixes_flags}"] = ""
+     cuda_defines["%{unfiltered_compile_flags}"] = ""
+diff --git a/third_party/grpc/generate_cc_env_fix.patch b/third_party/grpc/generate_cc_env_fix.patch
+index 51832fe9628..84093655824 100644
+--- a/third_party/grpc/generate_cc_env_fix.patch
++++ b/third_party/grpc/generate_cc_env_fix.patch
+@@ -1,10 +1,66 @@
++From d2cef9a0b4c07030426aebcff4d596056daa80c1 Mon Sep 17 00:00:00 2001
++From: Nishidha Panpaliya <npanpa23@in.ibm.com>
++Date: Mon, 7 Mar 2022 15:13:10 +0000
++Subject: [PATCH] Patch thirdparty upb
++
++---
++ bazel/generate_cc.bzl     |  1 +
++ third_party/upb/upb/upb.c | 16 +++-------------
++ 2 files changed, 4 insertions(+), 13 deletions(-)
++
++diff --git a/bazel/generate_cc.bzl b/bazel/generate_cc.bzl
++index 484959ebb7..81d52fd28f 100644
+ --- a/bazel/generate_cc.bzl
+ +++ b/bazel/generate_cc.bzl
+-@@ -141,6 +141,7 @@ def generate_cc_impl(ctx):
++@@ -140,6 +140,7 @@ def generate_cc_impl(ctx):
+          outputs = out_files,
+          executable = ctx.executable._protoc,
+          arguments = arguments,
+ +        use_default_shell_env = True,
+      )
+-
++ 
+      return struct(files = depset(out_files))
++diff --git a/third_party/upb/upb/upb.c b/third_party/upb/upb/upb.c
++index 266ea7d7f9..14a97bc584 100644
++--- a/third_party/upb/upb/upb.c
+++++ b/third_party/upb/upb/upb.c
++@@ -11,16 +11,6 @@
++ 
++ #include "upb/port_def.inc"
++ 
++-/* Guarantee null-termination and provide ellipsis truncation.
++- * It may be tempting to "optimize" this by initializing these final
++- * four bytes up-front and then being careful never to overwrite them,
++- * this is safer and simpler. */
++-static void nullz(upb_status *status) {
++-  const char *ellipsis = "...";
++-  size_t len = strlen(ellipsis);
++-  UPB_ASSERT(sizeof(status->msg) > len);
++-  memcpy(status->msg + sizeof(status->msg) - len, ellipsis, len);
++-}
++ 
++ /* upb_status *****************************************************************/
++ 
++@@ -37,8 +27,8 @@ const char *upb_status_errmsg(const upb_status *status) { return status->msg; }
++ void upb_status_seterrmsg(upb_status *status, const char *msg) {
++   if (!status) return;
++   status->ok = false;
++-  strncpy(status->msg, msg, sizeof(status->msg));
++-  nullz(status);
+++  strncpy(status->msg, msg, UPB_STATUS_MAX_MESSAGE - 1);
+++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
++ }
++ 
++ void upb_status_seterrf(upb_status *status, const char *fmt, ...) {
++@@ -52,7 +42,7 @@ void upb_status_vseterrf(upb_status *status, const char *fmt, va_list args) {
++   if (!status) return;
++   status->ok = false;
++   _upb_vsnprintf(status->msg, sizeof(status->msg), fmt, args);
++-  nullz(status);
+++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
++ }
++ 
++ /* upb_alloc ******************************************************************/
++-- 
++2.34.1
++
+diff --git a/third_party/grpc/upb_gcc10.patch b/third_party/grpc/upb_gcc10.patch
+new file mode 100644
+index 00000000000..a829e82878b
+--- /dev/null
++++ b/third_party/grpc/upb_gcc10.patch
+@@ -0,0 +1,68 @@
++From 7d1883b1c67ea1dfb82d1cef8fea2b50012a3b10 Mon Sep 17 00:00:00 2001
++From: Aman Surkar <Aman.Surkar@ibm.com>
++Date: Tue, 12 Mar 2024 08:51:45 +0000
++Subject: [PATCH] Fix for build failure with GCC10
++
++---
++ BUILD     |  2 +-
++ upb/upb.c | 17 +++--------------
++ 2 files changed, 4 insertions(+), 15 deletions(-)
++
++diff --git a/BUILD b/BUILD
++index ad85b202..2311b2e4 100644
++--- a/BUILD
+++++ b/BUILD
++@@ -44,7 +44,7 @@ config_setting(
++ 
++ config_setting(
++     name = "windows",
++-    constraint_values = ["@bazel_tools//platforms:windows"],
+++    constraint_values = ["@platforms//os:windows"],
++ )
++ 
++ config_setting(
++diff --git a/upb/upb.c b/upb/upb.c
++index 266ea7d7..1410b2d8 100644
++--- a/upb/upb.c
+++++ b/upb/upb.c
++@@ -11,17 +11,6 @@
++ 
++ #include "upb/port_def.inc"
++ 
++-/* Guarantee null-termination and provide ellipsis truncation.
++- * It may be tempting to "optimize" this by initializing these final
++- * four bytes up-front and then being careful never to overwrite them,
++- * this is safer and simpler. */
++-static void nullz(upb_status *status) {
++-  const char *ellipsis = "...";
++-  size_t len = strlen(ellipsis);
++-  UPB_ASSERT(sizeof(status->msg) > len);
++-  memcpy(status->msg + sizeof(status->msg) - len, ellipsis, len);
++-}
++-
++ /* upb_status *****************************************************************/
++ 
++ void upb_status_clear(upb_status *status) {
++@@ -37,8 +26,8 @@ const char *upb_status_errmsg(const upb_status *status) { return status->msg; }
++ void upb_status_seterrmsg(upb_status *status, const char *msg) {
++   if (!status) return;
++   status->ok = false;
++-  strncpy(status->msg, msg, sizeof(status->msg));
++-  nullz(status);
+++  strncpy(status->msg, msg, UPB_STATUS_MAX_MESSAGE - 1);
+++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
++ }
++ 
++ void upb_status_seterrf(upb_status *status, const char *fmt, ...) {
++@@ -52,7 +41,7 @@ void upb_status_vseterrf(upb_status *status, const char *fmt, va_list args) {
++   if (!status) return;
++   status->ok = false;
++   _upb_vsnprintf(status->msg, sizeof(status->msg), fmt, args);
++-  nullz(status);
+++  status->msg[UPB_STATUS_MAX_MESSAGE - 1] = '\0';
++ }
++ 
++ /* upb_alloc ******************************************************************/
++-- 
++2.40.1
++
+diff --git a/third_party/systemlibs/sqlite.BUILD b/third_party/systemlibs/sqlite.BUILD
+index 88a84a96137..31fc5ed5e88 100644
+--- a/third_party/systemlibs/sqlite.BUILD
++++ b/third_party/systemlibs/sqlite.BUILD
+@@ -1,12 +1,37 @@
+ licenses(["unencumbered"])  # Public Domain
+ 
++HEADERS = [
++   "sqlite3.h",
++   "sqlite3ext.h",
++]
++
++LIBS = [
++   "libsqlite3.so",
++   "libsqlite3.so.0",
++   "libsqlite3.so.0.8.6",
++]
++
+ # Production build of SQLite library that's baked into TensorFlow.
+ cc_library(
+     name = "org_sqlite",
+-    linkopts = ["-lsqlite3"],
++    hdrs = HEADERS,
++    srcs = LIBS,
++    includes = ["."],
+     visibility = ["//visibility:public"],
+ )
+ 
++genrule(
++    name = "sqlite-files",
++    outs = HEADERS + LIBS,
++    cmd = """
++      cp -fL "$(INCLUDEDIR)/sqlite3.h" "$(@D)" &&
++      cp -fL "$(INCLUDEDIR)/sqlite3ext.h" "$(@D)" &&
++      cp -fL "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)" &&
++      ln -sf "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)/libsqlite3.so.0" &&
++      ln -sf "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)/libsqlite3.so"
++    """,
++)
++
+ # This is a Copybara sync helper for Google.
+ py_library(
+     name = "python",
+diff --git a/third_party/tensorrt/BUILD.tpl b/third_party/tensorrt/BUILD.tpl
+index 7fa5935d395..f54fe4f7523 100644
+--- a/third_party/tensorrt/BUILD.tpl
++++ b/third_party/tensorrt/BUILD.tpl
+@@ -37,6 +37,7 @@ cc_library(
+         "//conditions:default": [":tensorrt_lib"],
+     }),
+     linkstatic = 1,
++    linkopts = ['-L/usr/lib64'],
+     deps = [
+         ":tensorrt_headers",
+         # TODO(b/174608722): fix this line.
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index d3ca3f57a50..c5ced7ececb 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -152,7 +152,9 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmyelin.so.1")
+ 
++    libraries.append("libmyelin.so.1")
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+     include_dir = config["tensorrt_include_dir"] + "/"
+-- 
+2.40.1
+
-- 
2.40.1

