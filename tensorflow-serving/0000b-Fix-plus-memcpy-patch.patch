From 2c397cb907ce8d65309dd7a472d8e09208b141a8 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Tue, 1 Jun 2021 09:53:39 -0400
Subject: [PATCH] Fix plus memcpy patch

---
 WORKSPACE                                          |   1 +
 third_party/tensorflow/BUILD                       |   0
 .../tensorflow/Fix-plus-memcpy-wrapper-patch.patch | 278 +++++++++++++++++++++
 3 files changed, 279 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/Fix-plus-memcpy-wrapper-patch.patch

diff --git a/WORKSPACE b/WORKSPACE
index 79ca7f2..813aacb 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,6 +17,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "cb99f136dc5c89143669888a44bfdd134c086e1e2d9e36278c1eb0f03fe62d76",
     git_commit = "a4dfb8d1a71385bd6d122e4f27f86dcebb96712d",
+    patch = "//third_party/tensorflow:Fix-plus-memcpy-wrapper-patch.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 0000000..e69de29
diff --git a/third_party/tensorflow/Fix-plus-memcpy-wrapper-patch.patch b/third_party/tensorflow/Fix-plus-memcpy-wrapper-patch.patch
new file mode 100644
index 0000000..99f2bda
--- /dev/null
+++ b/third_party/tensorflow/Fix-plus-memcpy-wrapper-patch.patch
@@ -0,0 +1,278 @@
+From f10e088e871dd399f9ae94ba6bd37c033ed5cb31 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Tue, 1 Jun 2021 09:36:42 -0400
+Subject: [PATCH] Fix plus memcpy wrapper patch
+
+---
+ .../core/platform/default/build_config/BUILD       |  4 ++++
+ tensorflow/core/platform/default/cord.h            |  5 ++++
+ tensorflow/core/profiler/utils/xplane_utils.cc     |  3 ++-
+ tensorflow/python/lib/core/ndarray_tensor.cc       |  2 +-
+ tensorflow/stream_executor/cuda/BUILD              |  2 +-
+ tensorflow/tensorflow.bzl                          |  2 ++
+ third_party/cub.BUILD                              |  2 +-
+ third_party/eigen3/eigen.patch                     | 28 ++++++++++++++++++++++
+ third_party/eigen3/workspace.bzl                   |  1 +
+ third_party/gpus/cuda/BUILD.tpl                    |  8 +++++++
+ third_party/gpus/cuda_configure.bzl                | 12 ++++++++++
+ third_party/tensorrt/BUILD.tpl                     |  1 +
+ third_party/tensorrt/tensorrt_configure.bzl        |  2 ++
+ 13 files changed, 68 insertions(+), 4 deletions(-)
+ create mode 100644 third_party/eigen3/eigen.patch
+
+diff --git a/tensorflow/core/platform/default/build_config/BUILD b/tensorflow/core/platform/default/build_config/BUILD
+index 9746e6e..4bf9bc8 100644
+--- a/tensorflow/core/platform/default/build_config/BUILD
++++ b/tensorflow/core/platform/default/build_config/BUILD
+@@ -212,8 +212,12 @@ cc_library(
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib",
+         ],
+         "//conditions:default": [
++            "-lmemcpy-2.14",
++            "-Lbazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
+             "-Wl,-rpath,../local_config_cuda/cuda/lib64",
+             "-Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64",
++            "-Wl,-rpath,bazel-out/host/bin/external/local_config_cuda/cuda/cuda/lib",
++
+         ],
+     }),
+     deps = [
+diff --git a/tensorflow/core/platform/default/cord.h b/tensorflow/core/platform/default/cord.h
+index cdfab1e..febd6fa 100644
+--- a/tensorflow/core/platform/default/cord.h
++++ b/tensorflow/core/platform/default/cord.h
+@@ -16,7 +16,12 @@ limitations under the License.
+ #ifndef TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ #define TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ 
++// It seems CORD doesn't work well with CUDA <= 10.2
++#if !defined(__CUDACC__) || ((defined(__CUDACC__) && CUDA_VERSOIN > 10020))
++
+ #include "absl/strings/cord.h"
+ #define TF_CORD_SUPPORT 1
+ 
++#endif  // __CUDACC__
++
+ #endif  // TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+diff --git a/tensorflow/core/profiler/utils/xplane_utils.cc b/tensorflow/core/profiler/utils/xplane_utils.cc
+index 5b7d22c..bcaff8e 100644
+--- a/tensorflow/core/profiler/utils/xplane_utils.cc
++++ b/tensorflow/core/profiler/utils/xplane_utils.cc
+@@ -101,7 +101,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index 6cf51ce..b7bd5a8 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -16,7 +16,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>
+-#include <optional>
++//#include <optional>
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index a43963b..3b2e10b 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -268,7 +268,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index a9da708..c1120f0 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -911,6 +911,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = visibility,
+         compatible_with = compatible_with,
+@@ -929,6 +930,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = [clean_dep("//tensorflow:internal")],
+         compatible_with = compatible_with,
+diff --git a/third_party/cub.BUILD b/third_party/cub.BUILD
+index 581d8dd..c446f05 100644
+--- a/third_party/cub.BUILD
++++ b/third_party/cub.BUILD
+@@ -11,5 +11,5 @@ exports_files(["LICENSE.TXT"])
+ cc_library(
+     name = "cub",
+     hdrs = glob(["cub/**"]),
+-    deps = ["@local_cuda//:cuda_headers"],
++    deps = ["@local_config_cuda//cuda:cuda_headers"],
+ )
+diff --git a/third_party/eigen3/eigen.patch b/third_party/eigen3/eigen.patch
+new file mode 100644
+index 0000000..f9740cb
+--- /dev/null
++++ b/third_party/eigen3/eigen.patch
+@@ -0,0 +1,28 @@
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++@@ -815,8 +815,9 @@
++       const Index firstIndex = firstInput(index);
++       for (Index i = 0; i < PacketSize; ++i) {
++         Op reducer(m_reducer);
++-        values[i] = internal::InnerMostDimReducer<Self, Op>::reduce(*this, firstIndex + i * num_values_to_reduce,
++-                                                                    num_values_to_reduce, reducer);
+++        Self::CoeffReturnType a = internal::InnerMostDimReducer<Self, Op>::reduce(*this,
+++                                       firstIndex + i * num_values_to_reduce, num_values_to_reduce, reducer);
+++        values[i] = a;
++       }
++     } else if (PreservingInnerMostDims) {
++       const Index firstIndex = firstInput(index);
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++@@ -543,7 +543,8 @@
++     EIGEN_ALIGN_MAX typename internal::remove_const<CoeffReturnType>::type values[PacketSize];
++     EIGEN_UNROLL_LOOP
++     for (int i = 0; i < PacketSize; ++i) {
++-      values[i] = coeff(index+i);
+++      Self::CoeffReturnType a = coeff(index+i);
+++      values[i] = a;
++     }
++     PacketReturnType rslt = internal::pload<PacketReturnType>(values);
++     return rslt;
+diff --git a/third_party/eigen3/workspace.bzl b/third_party/eigen3/workspace.bzl
+index 233231f..7bf6b17 100644
+--- a/third_party/eigen3/workspace.bzl
++++ b/third_party/eigen3/workspace.bzl
+@@ -13,6 +13,7 @@ def repo():
+         name = "eigen_archive",
+         build_file = "//third_party/eigen3:eigen_archive.BUILD",
+         sha256 = EIGEN_SHA256,
++        patch_file = "//third_party/eigen3:eigen.patch",
+         strip_prefix = "eigen-{commit}".format(commit = EIGEN_COMMIT),
+         urls = [
+             "https://storage.googleapis.com/mirror.tensorflow.org/gitlab.com/libeigen/eigen/-/archive/{commit}/eigen-{commit}.tar.gz".format(commit = EIGEN_COMMIT),
+diff --git a/third_party/gpus/cuda/BUILD.tpl b/third_party/gpus/cuda/BUILD.tpl
+index 8f783e5..a32ee37 100644
+--- a/third_party/gpus/cuda/BUILD.tpl
++++ b/third_party/gpus/cuda/BUILD.tpl
+@@ -179,6 +179,13 @@ cc_library(
+ )
+ 
+ cc_library(
++    name = "memcpy-2.14",
++    srcs = ["cuda/lib/%{memcpy-2.14_lib}"],
++    data = ["cuda/lib/%{memcpy-2.14_lib}"],
++    linkstatic = 1,
++)
++
++cc_library(
+     name = "cuda",
+     deps = [
+         ":cublas",
+@@ -188,6 +195,7 @@ cc_library(
+         ":cudnn",
+         ":cufft",
+         ":curand",
++        ":memcpy-2.14",
+     ],
+ )
+ 
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index 867cab4..22e61f3 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -476,6 +476,8 @@ def _lib_path(lib, cpu_value, basedir, version, static):
+     return "%s/%s" % (basedir, file_name)
+ 
+ def _should_check_soname(version, static):
++    if version == "":
++        return False
+     return version and not static
+ 
+ def _check_cuda_lib_params(lib, cpu_value, basedir, version, static = False):
+@@ -586,6 +588,13 @@ def _find_libs(repository_ctx, check_cuda_libs_script, cuda_config):
+             cuda_config.cudnn_version,
+             static = False,
+         ),
++        "memcpy-2.14": _check_cuda_lib_params(
++            "memcpy-2.14",
++            cpu_value,
++            cuda_config.config["cudnn_library_dir"],
++            "",
++            static = False,
++        ),
+         "cupti": _check_cuda_lib_params(
+             "cupti",
+             cpu_value,
+@@ -794,6 +803,7 @@ def _create_dummy_repository(repository_ctx):
+             "%{curand_lib}": lib_name("curand", cpu_value),
+             "%{cupti_lib}": lib_name("cupti", cpu_value),
+             "%{cusparse_lib}": lib_name("cusparse", cpu_value),
++            "%{memcpy-2.14_lib}": lib_name("memcpy-2.14", cpu_value),
+             "%{cub_actual}": ":cuda_headers",
+             "%{copy_rules}": """
+ filegroup(name="cuda-include")
+@@ -826,6 +836,7 @@ filegroup(name="cudnn-include")
+     repository_ctx.file("cuda/cuda/lib/%s" % lib_name("cufft", cpu_value))
+     repository_ctx.file("cuda/cuda/lib/%s" % lib_name("cupti", cpu_value))
+     repository_ctx.file("cuda/cuda/lib/%s" % lib_name("cusparse", cpu_value))
++    repository_ctx.file("cuda/cuda/lib/%s" % lib_name("memcpy-2.14", cpu_value))
+ 
+     # Set up cuda_config.h, which is used by
+     # tensorflow/stream_executor/dso_loader.cc.
+@@ -1159,6 +1170,7 @@ def _create_local_cuda_repository(repository_ctx):
+             "%{curand_lib}": _basename(repository_ctx, cuda_libs["curand"]),
+             "%{cupti_lib}": _basename(repository_ctx, cuda_libs["cupti"]),
+             "%{cusparse_lib}": _basename(repository_ctx, cuda_libs["cusparse"]),
++            "%{memcpy-2.14_lib}": _basename(repository_ctx, cuda_libs["memcpy-2.14"]),
+             "%{cub_actual}": cub_actual,
+             "%{copy_rules}": "\n".join(copy_rules),
+         },
+diff --git a/third_party/tensorrt/BUILD.tpl b/third_party/tensorrt/BUILD.tpl
+index 7fa5935..f54fe4f 100644
+--- a/third_party/tensorrt/BUILD.tpl
++++ b/third_party/tensorrt/BUILD.tpl
+@@ -37,6 +37,7 @@ cc_library(
+         "//conditions:default": [":tensorrt_lib"],
+     }),
+     linkstatic = 1,
++    linkopts = ['-L/usr/lib64'],
+     deps = [
+         ":tensorrt_headers",
+         # TODO(b/174608722): fix this line.
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index 8b28f57..bc54004 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -115,6 +115,8 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmyelin.so.1")
++    libraries.append("libmemcpy-2.14.so")
+ 
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+-- 
+1.8.3.1
+
-- 
1.8.3.1

