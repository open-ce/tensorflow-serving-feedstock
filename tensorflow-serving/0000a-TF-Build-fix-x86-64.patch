From dec62b40a00ba484e18428ff85e33899adac3578 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Tue, 1 Jun 2021 10:24:07 -0400
Subject: [PATCH] TF Build fix x86-64

---
 WORKSPACE                                        |   1 +
 third_party/tensorflow/BUILD                     |   0
 third_party/tensorflow/TF-Build-fix-x86-64.patch | 180 +++++++++++++++++++++++
 3 files changed, 181 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/TF-Build-fix-x86-64.patch

diff --git a/WORKSPACE b/WORKSPACE
index 79ca7f2..813aacb 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,6 +17,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "cb99f136dc5c89143669888a44bfdd134c086e1e2d9e36278c1eb0f03fe62d76",
     git_commit = "a4dfb8d1a71385bd6d122e4f27f86dcebb96712d",
+    patch = "//third_party/tensorflow:Fix-plus-memcpy-wrapper-patch.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 0000000..e69de29
diff --git a/third_party/tensorflow/TF-Build-fix-x86-64.patch b/third_party/tensorflow/TF-Build-fix-x86-64.patch
new file mode 100644
index 0000000..6c49fd6
--- /dev/null
+++ b/third_party/tensorflow/TF-Build-fix-x86-64.patch
@@ -0,0 +1,180 @@
+From 0d984fd7267ee72b5375323f213ad914cf8e8835 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Tue, 1 Jun 2021 10:22:35 -0400
+Subject: [PATCH] TF Build fix x86-64
+
+---
+ tensorflow/core/platform/default/cord.h        |  5 +++++
+ tensorflow/core/profiler/utils/xplane_utils.cc |  3 ++-
+ tensorflow/python/lib/core/ndarray_tensor.cc   |  2 +-
+ tensorflow/stream_executor/cuda/BUILD          |  2 +-
+ tensorflow/tensorflow.bzl                      |  2 ++
+ third_party/cub.BUILD                          |  2 +-
+ third_party/eigen3/eigen.patch                 | 28 ++++++++++++++++++++++++++
+ third_party/eigen3/workspace.bzl               |  1 +
+ third_party/tensorrt/BUILD.tpl                 |  1 +
+ third_party/tensorrt/tensorrt_configure.bzl    |  1 +
+ 10 files changed, 43 insertions(+), 4 deletions(-)
+ create mode 100644 third_party/eigen3/eigen.patch
+
+diff --git a/tensorflow/core/platform/default/cord.h b/tensorflow/core/platform/default/cord.h
+index cdfab1e..febd6fa 100644
+--- a/tensorflow/core/platform/default/cord.h
++++ b/tensorflow/core/platform/default/cord.h
+@@ -16,7 +16,12 @@ limitations under the License.
+ #ifndef TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ #define TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+ 
++// It seems CORD doesn't work well with CUDA <= 10.2
++#if !defined(__CUDACC__) || ((defined(__CUDACC__) && CUDA_VERSOIN > 10020))
++
+ #include "absl/strings/cord.h"
+ #define TF_CORD_SUPPORT 1
+ 
++#endif  // __CUDACC__
++
+ #endif  // TENSORFLOW_CORE_PLATFORM_DEFAULT_CORD_H_
+diff --git a/tensorflow/core/profiler/utils/xplane_utils.cc b/tensorflow/core/profiler/utils/xplane_utils.cc
+index 5b7d22c..bcaff8e 100644
+--- a/tensorflow/core/profiler/utils/xplane_utils.cc
++++ b/tensorflow/core/profiler/utils/xplane_utils.cc
+@@ -101,7 +101,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index 6cf51ce..b7bd5a8 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -16,7 +16,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>
+-#include <optional>
++//#include <optional>
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index a43963b..3b2e10b 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -268,7 +268,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index a9da708..c1120f0 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -911,6 +911,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = visibility,
+         compatible_with = compatible_with,
+@@ -929,6 +930,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = [clean_dep("//tensorflow:internal")],
+         compatible_with = compatible_with,
+diff --git a/third_party/cub.BUILD b/third_party/cub.BUILD
+index 581d8dd..c446f05 100644
+--- a/third_party/cub.BUILD
++++ b/third_party/cub.BUILD
+@@ -11,5 +11,5 @@ exports_files(["LICENSE.TXT"])
+ cc_library(
+     name = "cub",
+     hdrs = glob(["cub/**"]),
+-    deps = ["@local_cuda//:cuda_headers"],
++    deps = ["@local_config_cuda//cuda:cuda_headers"],
+ )
+diff --git a/third_party/eigen3/eigen.patch b/third_party/eigen3/eigen.patch
+new file mode 100644
+index 0000000..f9740cb
+--- /dev/null
++++ b/third_party/eigen3/eigen.patch
+@@ -0,0 +1,28 @@
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++@@ -815,8 +815,9 @@
++       const Index firstIndex = firstInput(index);
++       for (Index i = 0; i < PacketSize; ++i) {
++         Op reducer(m_reducer);
++-        values[i] = internal::InnerMostDimReducer<Self, Op>::reduce(*this, firstIndex + i * num_values_to_reduce,
++-                                                                    num_values_to_reduce, reducer);
+++        Self::CoeffReturnType a = internal::InnerMostDimReducer<Self, Op>::reduce(*this,
+++                                       firstIndex + i * num_values_to_reduce, num_values_to_reduce, reducer);
+++        values[i] = a;
++       }
++     } else if (PreservingInnerMostDims) {
++       const Index firstIndex = firstInput(index);
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++@@ -543,7 +543,8 @@
++     EIGEN_ALIGN_MAX typename internal::remove_const<CoeffReturnType>::type values[PacketSize];
++     EIGEN_UNROLL_LOOP
++     for (int i = 0; i < PacketSize; ++i) {
++-      values[i] = coeff(index+i);
+++      Self::CoeffReturnType a = coeff(index+i);
+++      values[i] = a;
++     }
++     PacketReturnType rslt = internal::pload<PacketReturnType>(values);
++     return rslt;
+diff --git a/third_party/eigen3/workspace.bzl b/third_party/eigen3/workspace.bzl
+index 233231f..7bf6b17 100644
+--- a/third_party/eigen3/workspace.bzl
++++ b/third_party/eigen3/workspace.bzl
+@@ -13,6 +13,7 @@ def repo():
+         name = "eigen_archive",
+         build_file = "//third_party/eigen3:eigen_archive.BUILD",
+         sha256 = EIGEN_SHA256,
++        patch_file = "//third_party/eigen3:eigen.patch",
+         strip_prefix = "eigen-{commit}".format(commit = EIGEN_COMMIT),
+         urls = [
+             "https://storage.googleapis.com/mirror.tensorflow.org/gitlab.com/libeigen/eigen/-/archive/{commit}/eigen-{commit}.tar.gz".format(commit = EIGEN_COMMIT),
+diff --git a/third_party/tensorrt/BUILD.tpl b/third_party/tensorrt/BUILD.tpl
+index 7fa5935..f54fe4f 100644
+--- a/third_party/tensorrt/BUILD.tpl
++++ b/third_party/tensorrt/BUILD.tpl
+@@ -37,6 +37,7 @@ cc_library(
+         "//conditions:default": [":tensorrt_lib"],
+     }),
+     linkstatic = 1,
++    linkopts = ['-L/usr/lib64'],
+     deps = [
+         ":tensorrt_headers",
+         # TODO(b/174608722): fix this line.
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index 8b28f57..630a465 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -115,6 +115,7 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmyelin.so.1")
+ 
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+-- 
+1.8.3.1
+
-- 
1.8.3.1

