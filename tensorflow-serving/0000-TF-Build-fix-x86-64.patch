From 00b1ed13540c49c5d315c7a98ab376dc18715f03 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Thu, 25 Nov 2021 03:50:06 -0500
Subject: [PATCH] TF Build fix x86-64

---
 WORKSPACE                                     |   1 +
 third_party/tensorflow/BUILD                  |   0
 .../tensorflow/TF-Build-fix-x86-64.patch      | 216 ++++++++++++++++++
 3 files changed, 217 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/TF-Build-fix-x86-64.patch

diff --git a/WORKSPACE b/WORKSPACE
index 18af812a..d75f9cc3 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -17,6 +17,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "ff0df77ec72676d3260502dd19f34518ecd65bb9ead4f7dfdf8bd11cff8640e3",
     git_commit = "c256c071bb26e1e13b4666d1b3e229e110bc914a",
+    patch = "//third_party/tensorflow:TF-Build-fix-x86-64.patch",
 )
 
 # Import all of TensorFlow Serving's external dependencies.
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 00000000..e69de29b
diff --git a/third_party/tensorflow/TF-Build-fix-x86-64.patch b/third_party/tensorflow/TF-Build-fix-x86-64.patch
new file mode 100644
index 00000000..cb953366
--- /dev/null
+++ b/third_party/tensorflow/TF-Build-fix-x86-64.patch
@@ -0,0 +1,216 @@
+From 9558ac9599505f5b1d1d3d4e56ad0bf75a89ede4 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Thu, 25 Nov 2021 03:48:46 -0500
+Subject: [PATCH] TF Build fix x86-64
+
+---
+ .../core/profiler/utils/xplane_utils.cc       |  3 +-
+ tensorflow/python/lib/core/ndarray_tensor.cc  |  2 +-
+ tensorflow/stream_executor/cuda/BUILD         |  2 +-
+ tensorflow/tensorflow.bzl                     |  2 ++
+ third_party/eigen3/eigen.patch                | 28 +++++++++++++++++++
+ third_party/eigen3/workspace.bzl              |  1 +
+ third_party/gpus/cuda_configure.bzl           | 10 ++++---
+ third_party/systemlibs/sqlite.BUILD           | 27 +++++++++++++++++-
+ third_party/tensorrt/BUILD.tpl                |  1 +
+ third_party/tensorrt/tensorrt_configure.bzl   |  1 +
+ 10 files changed, 69 insertions(+), 8 deletions(-)
+ create mode 100644 third_party/eigen3/eigen.patch
+
+diff --git a/tensorflow/core/profiler/utils/xplane_utils.cc b/tensorflow/core/profiler/utils/xplane_utils.cc
+index 5efcdcda4b0..f012d7f99e2 100644
+--- a/tensorflow/core/profiler/utils/xplane_utils.cc
++++ b/tensorflow/core/profiler/utils/xplane_utils.cc
+@@ -101,7 +101,8 @@ const XPlane* FindPlaneWithName(const XSpace& space, absl::string_view name) {
+ 
+ std::vector<const XPlane*> FindPlanesWithNames(
+     const XSpace& space, const std::vector<absl::string_view>& names) {
+-  absl::flat_hash_set<absl::string_view> names_set(names.begin(), names.end());
++  absl::flat_hash_set<absl::string_view> names_set;
++  names_set.insert(names.begin(), names.end());
+   std::vector<int> indices =
+       FindAll(space.planes(), [&names_set](const XPlane* plane) {
+         return names_set.contains(plane->name());
+diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
+index 06a43792928..9d1ac67ed1b 100644
+--- a/tensorflow/python/lib/core/ndarray_tensor.cc
++++ b/tensorflow/python/lib/core/ndarray_tensor.cc
+@@ -16,7 +16,7 @@ limitations under the License.
+ #include "tensorflow/python/lib/core/ndarray_tensor.h"
+ 
+ #include <cstring>
+-#include <optional>
++//#include <optional>
+ 
+ #include "tensorflow/c/eager/tfe_context_internal.h"
+ #include "tensorflow/c/tf_tensor_internal.h"
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index 98a60e33f12..e736a07e01b 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -264,7 +264,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index c72a0d414bd..814c3d83e2b 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -955,6 +955,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = visibility,
+         compatible_with = compatible_with,
+@@ -973,6 +974,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = [clean_dep("//tensorflow:internal")],
+         compatible_with = compatible_with,
+diff --git a/third_party/eigen3/eigen.patch b/third_party/eigen3/eigen.patch
+new file mode 100644
+index 00000000000..f9740cb5145
+--- /dev/null
++++ b/third_party/eigen3/eigen.patch
+@@ -0,0 +1,28 @@
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++@@ -815,8 +815,9 @@
++       const Index firstIndex = firstInput(index);
++       for (Index i = 0; i < PacketSize; ++i) {
++         Op reducer(m_reducer);
++-        values[i] = internal::InnerMostDimReducer<Self, Op>::reduce(*this, firstIndex + i * num_values_to_reduce,
++-                                                                    num_values_to_reduce, reducer);
+++        Self::CoeffReturnType a = internal::InnerMostDimReducer<Self, Op>::reduce(*this,
+++                                       firstIndex + i * num_values_to_reduce, num_values_to_reduce, reducer);
+++        values[i] = a;
++       }
++     } else if (PreservingInnerMostDims) {
++       const Index firstIndex = firstInput(index);
++diff -Naur a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++--- a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
+++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++@@ -543,7 +543,8 @@
++     EIGEN_ALIGN_MAX typename internal::remove_const<CoeffReturnType>::type values[PacketSize];
++     EIGEN_UNROLL_LOOP
++     for (int i = 0; i < PacketSize; ++i) {
++-      values[i] = coeff(index+i);
+++      Self::CoeffReturnType a = coeff(index+i);
+++      values[i] = a;
++     }
++     PacketReturnType rslt = internal::pload<PacketReturnType>(values);
++     return rslt;
+diff --git a/third_party/eigen3/workspace.bzl b/third_party/eigen3/workspace.bzl
+index 21799365434..b3e1b659b6f 100644
+--- a/third_party/eigen3/workspace.bzl
++++ b/third_party/eigen3/workspace.bzl
+@@ -15,6 +15,7 @@ def repo():
+         name = "eigen_archive",
+         build_file = "//third_party/eigen3:eigen_archive.BUILD",
+         sha256 = EIGEN_SHA256,
++        patch_file = "//third_party/eigen3:eigen.patch",
+         strip_prefix = "eigen-{commit}".format(commit = EIGEN_COMMIT),
+         urls = [
+             "https://storage.googleapis.com/mirror.tensorflow.org/gitlab.com/libeigen/eigen/-/archive/{commit}/eigen-{commit}.tar.gz".format(commit = EIGEN_COMMIT),
+diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl
+index ed8ba3d5205..5f40e667ea5 100644
+--- a/third_party/gpus/cuda_configure.bzl
++++ b/third_party/gpus/cuda_configure.bzl
+@@ -1206,10 +1206,12 @@ def _create_local_cuda_repository(repository_ctx):
+     # TODO: when bazel stops adding '-B/usr/bin' by default, remove this
+     #       flag from the CROSSTOOL completely (see
+     #       https://github.com/bazelbuild/bazel/issues/5634)
+-    if should_download_clang:
+-        cuda_defines["%{linker_bin_path}"] = ""
+-    else:
+-        cuda_defines["%{linker_bin_path}"] = host_compiler_prefix
++    # if should_download_clang:
++    #     cuda_defines["%{linker_bin_path}"] = ""
++    # else:
++    #     cuda_defines["%{linker_bin_path}"] = host_compiler_prefix
++    # Never add -B/usr/bin
++    cuda_defines["%{linker_bin_path}"] = ""
+ 
+     cuda_defines["%{extra_no_canonical_prefixes_flags}"] = ""
+     cuda_defines["%{unfiltered_compile_flags}"] = ""
+diff --git a/third_party/systemlibs/sqlite.BUILD b/third_party/systemlibs/sqlite.BUILD
+index 88a84a96137..31fc5ed5e88 100644
+--- a/third_party/systemlibs/sqlite.BUILD
++++ b/third_party/systemlibs/sqlite.BUILD
+@@ -1,12 +1,37 @@
+ licenses(["unencumbered"])  # Public Domain
+ 
++HEADERS = [
++   "sqlite3.h",
++   "sqlite3ext.h",
++]
++
++LIBS = [
++   "libsqlite3.so",
++   "libsqlite3.so.0",
++   "libsqlite3.so.0.8.6",
++]
++
+ # Production build of SQLite library that's baked into TensorFlow.
+ cc_library(
+     name = "org_sqlite",
+-    linkopts = ["-lsqlite3"],
++    hdrs = HEADERS,
++    srcs = LIBS,
++    includes = ["."],
+     visibility = ["//visibility:public"],
+ )
+ 
++genrule(
++    name = "sqlite-files",
++    outs = HEADERS + LIBS,
++    cmd = """
++      cp -fL "$(INCLUDEDIR)/sqlite3.h" "$(@D)" &&
++      cp -fL "$(INCLUDEDIR)/sqlite3ext.h" "$(@D)" &&
++      cp -fL "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)" &&
++      ln -sf "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)/libsqlite3.so.0" &&
++      ln -sf "$(LIBDIR)/libsqlite3.so.0.8.6" "$(@D)/libsqlite3.so"
++    """,
++)
++
+ # This is a Copybara sync helper for Google.
+ py_library(
+     name = "python",
+diff --git a/third_party/tensorrt/BUILD.tpl b/third_party/tensorrt/BUILD.tpl
+index 7fa5935d395..f54fe4f7523 100644
+--- a/third_party/tensorrt/BUILD.tpl
++++ b/third_party/tensorrt/BUILD.tpl
+@@ -37,6 +37,7 @@ cc_library(
+         "//conditions:default": [":tensorrt_lib"],
+     }),
+     linkstatic = 1,
++    linkopts = ['-L/usr/lib64'],
+     deps = [
+         ":tensorrt_headers",
+         # TODO(b/174608722): fix this line.
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index db3c65a8766..5a82e705cc7 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -128,6 +128,7 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmyelin.so.1")
+ 
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+-- 
+2.32.0
+
-- 
2.32.0

